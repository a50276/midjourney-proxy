version: '3.8'

services:
  # Midjourney Proxy 主应用
  midjourney-proxy:
    build: .
    container_name: midjourney-proxy
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs
    environment:
      - TZ=Asia/Shanghai
      - APP_MODE=production
    depends_on:
      - redis
    networks:
      - midjourney-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: midjourney-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis123456
    networks:
      - midjourney-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL 数据库 (可选)
  mysql:
    image: mysql:8.0
    container_name: midjourney-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=midjourney
      - MYSQL_USER=midjourney
      - MYSQL_PASSWORD=password123
      - TZ=Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - midjourney-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - mysql

  # PostgreSQL 数据库 (可选)
  postgres:
    image: postgres:15-alpine
    container_name: midjourney-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=midjourney
      - POSTGRES_USER=midjourney
      - POSTGRES_PASSWORD=password123
      - TZ=Asia/Shanghai
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - midjourney-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U midjourney"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - postgres

  # MongoDB 数据库 (可选)
  mongodb:
    image: mongo:6.0
    container_name: midjourney-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=midjourney
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - midjourney-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - mongodb

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: midjourney-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - midjourney-proxy
    networks:
      - midjourney-network
    profiles:
      - nginx

networks:
  midjourney-network:
    driver: bridge

volumes:
  redis_data:
  mysql_data:
  postgres_data:
  mongodb_data: